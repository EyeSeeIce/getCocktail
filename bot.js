const TG_BOT = require('node-telegram-bot-api')
const fetch = require('node-fetch');
const token = '1653544018:AAHrVGFv-oie7e1Pd30vzj7OgqHjP5xaMks'

var admin = require('firebase-admin');
var serviceAccount = require("./key/reduxpractics-firebase-adminsdk-wttf1-c9ca92b516.json");

admin.initializeApp({
    credential: admin.credential.cert(serviceAccount),
    databaseURL: "https://reduxpractics-default-rtdb.europe-west1.firebasedatabase.app"
});


const database = admin.database()


const myBot = new TG_BOT(token, {polling: true})

const keyboard = {
    "reply_markup": {
        resize_keyboard: true,
        one_time_keyboard: true,
        "keyboard": [[
            {
                text: '–°–ª—É—á–∞–π–Ω—ã–π –∫–æ–∫—Ç–µ–π–ª—å',
            },
            {
                text: '–ò–∑–±—Ä–∞–Ω–Ω—ã–µ –∫–æ–∫—Ç–µ–π–ª–∏',
            }
        ]]
    }
}

var options = {
    reply_markup: JSON.stringify({
        inline_keyboard: [
            [{text: '–î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ', callback_data: '1'}],
        ]
    })
};
const getOptions = name => {
    let {type} = JSON.parse(name)
    if (type === 'save') {
        return {
            reply_markup: JSON.stringify({
                inline_keyboard: [
                    [{text: '–î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ', callback_data: name}],
                ]
            })
        }
    }
    return {
        reply_markup: JSON.stringify({
            inline_keyboard: [
                [{text: '–ü–æ–∫–∞–∑–∞—Ç—å', callback_data: name}],
            ]
        })
    }

}
myBot.on('callback_query', query => {
    let {type, data} = JSON.parse(query.data)
    switch (type) {
        case 'save':
            let name = ''
            console.log(data)
            database.ref(`users/${query.from.username}/favorites/${data.trim()}`).set('+')
            break
        case 'show':
            database.ref(`/users/${query.from.username}/favorites/${data}`).once('value', snp => {
                fetch(`https://www.thecocktaildb.com/api/json/v1/1/search.php?s=${snp.key.toString()}`)
                    .then(r => r.json())
                    .then(b => {
                        let q = b.drinks[0]
                        let ing = []
                        for (let i = 0; i < 15; i++) {
                            if (q[`strIngredient${i}`]) {
                                ing.push(q[`strIngredient${i}`])
                            }
                        }
                        let img = q.strDrinkThumb
                        let data = `
                            \r\n–ù–∞–∑–≤–∞–Ω–∏–µ: ${q.strDrink}
                            \r\n–ê–ª–∫–æ–≥–æ–ª—å–Ω—ã–π: ${q.strAlcoholic === "Alcoholic" ? '–î–∞' : '–ù–µ—Ç'}
                            \r\n–†–µ—Ü–µ–ø—Ç: ${b.drinks[0].strInstructions}
                            ${ing.map((i, index) => `\r\n–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç ${index + 1}: ${i}`)}
                            `
                        myBot.sendPhoto(query.message.chat.id, img)
                            .then(() => myBot.sendMessage(query.message.chat.id, data))

                    })
            })
            break
    }


})
const commandList = `
/start
/get name - –≤–º–µ—Å—Ç–æ [NAME] –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–∫—Ç–µ–π–ª—è –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º
/random - –ø–æ–ª—É—á–∏—Ç–µ —Å–ª—É—á–∞–π–Ω—ã–π –∫–æ–∫—Ç–µ–π–ª—å 
`
const getExample = `
\r\n/get margaritaüòè
\r\n/get vodkaü•¥
\r\n/get limeüò∑
\r\n/get black russianüòà

`

const a = ['./vendors//cats/dwoilp3BVjlE.jpg', './vendors//cats/f4d2961b652880be432fb9580891ed62.png', './vendors//cats/base_87716f252d.jpg']
myBot.onText(/\/start/, (msg) => {
    myBot.sendMessage(msg.chat.id, `
    \r\n–ë–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å—Å—è —Å –Ω–∞–ø–∏—Ç–∫–æ–º!
   \r\n–ü–∏—à–∏—Ç–µ /get name , –≥–¥–µ –≤–∏–µ—Å—Ç–æ [name] –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–∫—Ç–µ–π–ª—è –∏–ª–∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º
   \r\n–ü—Ä–∏–º–µ—Ä /get margarita /get lime
    `, keyboard)
})

myBot.onText(/\/menu/, (msg) => {

    myBot.sendMessage(msg.chat.id, '–ú–µ–Ω—é –æ—Ç–∫—Ä—ã—Ç–æ', keyboard)

});

function rand() {
    return Math.floor(Math.random() * a.length)
}


function randomCocktail(msg) {
    return fetch('https://www.thecocktaildb.com/api/json/v1/1/random.php')
        .then(a => a.json())
        .then(b => {
            let q = b.drinks[0]
            let ing = []
            for (let i = 0; i < 15; i++) {
                if (q[`strIngredient${i}`]) {
                    ing.push(q[`strIngredient${i}`])
                }
            }
            let img = q.strDrinkThumb
            let data = `
            \r\n–ù–∞–∑–≤–∞–Ω–∏–µ: ${q.strDrink}
            \r\n–ê–ª–∫–≥–æ–ª—å–Ω—ã–π: ${q.strAlcoholic === "Alcoholic" ? '–î–∞' : '–ù–µ—Ç'}
            \r\n–†–µ—Ü–µ–ø—Ç: ${b.drinks[0].strInstructions}
            ${ing.map((i, index) => `\r\n–ò–Ω–≥—Ä–∏–¥–∏–µ–Ω—Ç ${index + 1}: ${i}`)}
            `
            myBot.sendPhoto(msg.chat.id, img)
                .then(() => myBot.sendMessage(msg.chat.id, data, getOptions(JSON.stringify({
                        type: 'save',
                        data: q.strDrink,
                    })
                )))

        })
}

myBot.onText(/\/help/, (msg) => {

    myBot.sendMessage(msg.chat.id, commandList)

});
myBot.onText(/\/get (.+)/, (msg, match) => {
    let coctailName = match[1]
    if (coctailName) {
        try {
            fetch(`https://www.thecocktaildb.com/api/json/v1/1/search.php?s=${coctailName.toString()}`)
                .then(a => {
                    return a.json()
                })
                .then(b => {
                    let q = b.drinks[0]
                    let ing = []
                    for (let i = 0; i < 15; i++) {
                        if (q[`strIngredient${i}`]) {
                            ing.push(q[`strIngredient${i}`])
                        }
                    }
                    let img = q.strDrinkThumb
                    let data = `
            \r\n–ù–∞–∑–≤–∞–Ω–∏–µ: ${q.strDrink}
            \r\n–ê–ª–∫–æ–≥–æ–ª—å–Ω—ã–π: ${q.strAlcoholic === "Alcoholic" ? '–î–∞' : '–ù–µ—Ç'}
            \r\n–†–µ—Ü–µ–ø—Ç: ${b.drinks[0].strInstructions}
            ${ing.map((i, index) => `\r\n–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç ${index + 1}: ${i}`)}
            `
                    myBot.sendPhoto(msg.chat.id, img)
                        .then(() => myBot.sendMessage(msg.chat.id, data, getOptions(JSON.stringify({
                                type: 'save',
                                data: q.strDrink,
                            })
                        )))

                })
            return
        } catch (e) {
            return
        }
    }
});


myBot.onText(/\/getex/, msg => {

    myBot.sendMessage(msg.chat.id, getExample)
})

myBot.onText(/\/random/, (msg, match) => {
    randomCocktail(msg)
})

myBot.on('message', (msg) => {
    switch (msg.text) {
        case '/hi':
            myBot.sendMessage(msg.chat.id, `–ò —Ç–µ–±–µ –ø—Ä–∏–≤–µ—Ç, ${msg.from.username}`)
            break
        case '–ò–∑–±—Ä–∞–Ω–Ω—ã–µ –∫–æ–∫—Ç–µ–π–ª–∏':
            let userName = msg.from.username
            let userId = msg.chat.id
            database.ref(`users/${userName}/favorites`).on('value', snp => {
                let data = snp.val()
                for (let key in data) {
                    myBot.sendMessage(userId, key, getOptions(JSON.stringify({
                            text: '–ü–æ–∫–∞–∑–∞—Ç—å',
                            type: 'show',
                            data: key,
                        }))
                    )
                }
                /*myBot.sendMessage(userId, snp.val())*/
            })
            break
        case '–°–ª—É—á–∞–π–Ω—ã–π –∫–æ–∫—Ç–µ–π–ª—å':
            randomCocktail(msg)
    }

});